CMAKE_MINIMUM_REQUIRED(VERSION 3.11.0)
PROJECT(lhpm VERSION 0.9.1 LANGUAGES C)


# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_WITH_EXTERNAL_PROJECT "Enable external project build." ON)
OPTION(BUILD_WITH_INSTALL "" ON )
IF (NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ENDIF ()


# hpm version setup.
SET(HPM_VERSION_MAJOR 0)
SET(HPM_VERSION_MINOR 9)
SET(HPM_VERSION_REVISION 0)
SET(HPM_VERSION_STATE rc)
SET(HPM_VERSION ${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}${HPM_VERSION_STATE}${HPM_VERSION_REVISION} )

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules" )
SET(LIBHPM_COMPONENT     "libhpm${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}.${HPM_VERSION_REVISION}" )
SET(LIBHPM-DEV_COMPONENT "libhpm${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}.${HPM_VERSION_REVISION}-dev" )
SET(CPACK_COMPONENTS_ALL ${LIBHPM_COMPONENT} ${LIBHPM-DEV_COMPONENT} hpm-dev)

INCLUDE(CheckStructHasMember)
INCLUDE(GNUInstallDirs)
INCLUDE(CheckCXXCompilerFlag)

FIND_PACKAGE(Git)
IF(GIT_FOUND)
	MESSAGE(STATUS "git found: ${GIT_EXECUTABLE} -- ${GIT_VERSION_STRING}")
ENDIF()
IF(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
	# Update submodules as needed
	OPTION(GIT_SUBMODULE "Check submodules during build" ON)
	IF(GIT_SUBMODULE)
		MESSAGE(STATUS "Submodule update")
		EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} submodule update --init
						WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
						RESULT_VARIABLE GIT_SUBMOD_RESULT)
		IF(NOT GIT_SUBMOD_RESULT EQUAL "0")
			MESSAGE(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
		ENDIF()
	ENDIF()
ELSE()

ENDIF()

IF (BUILD_WITH_EXTERNAL_PROJECT)
	INCLUDE(ExternalProject)
	IF (NOT GIT_FOUND)
		MESSAGE(FATAL_ERROR "Git is required in order to fetch the external project hpm.")
	ENDIF ()

	SET_PROPERTY(DIRECTORY PROPERTY EP_STEP_TARGETS build)

	# Download the hpm library.
	SET(HPM_ROOT ${CMAKE_CURRENT_BINARY_DIR}/deps/hpm)
	SET(HPM_LIB_DIR ${HPM_ROOT}/lib)
	SET(HPM_INCLUDE_DIR ${HPM_ROOT}/include)
	ExternalProject_Add(hpm-external
			URL ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm
			SOURCE_DIR ${HPM_ROOT}/src/hpm
			BINARY_DIR ${HPM_ROOT}/src/hpm-build
			INSTALL_DIR ${HPM_ROOT}
			CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR> -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DBUILD_TEST=OFF
			STEP_TARGETS build
			COMMENT "Building Hpm."
			LOG_DOWNLOAD ON)
	# Include HPM headers.
	ADD_LIBRARY(hpm SHARED IMPORTED)
	ADD_DEPENDENCIES(hpm hpm-external)
	SET_TARGET_PROPERTIES(hpm PROPERTIES
			IMPORTED_LOCATION ${HPM_LIB_DIR}/libhpm.so
			INTERFACE_LINK_LIBRARIES ${HPM_LIB_DIR}/libhpm.so
				INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include)
	SET(HPM_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/extern/hpm/include")
ENDIF ()


# GCC compiler flag options.
IF((CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX) AND NOT CMAKE_COMPILER_IS_MINGW)
	IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8) # -fPIC is only required
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF()

	#
	ADD_DEFINITIONS(-Wall -w -fpermissive)
	ADD_DEFINITIONS( -export-dynamic -rdynamic -lstdc++fs -std=c++17 )

	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG=1)
		ADD_DEFINITIONS(-O3)
		SET(CMAKE_RELEASE TRUE)
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")
	ELSE()
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
		ADD_DEFINITIONS(-D_GLIBCXX_ASSERTIONS)
	ENDIF()

	#
	IF(BUILD_WITH_COVERAGE)
		MESSAGE(STATUS "Building with coverage")
		SET(GCC_COVERAGE_COMPILE_FLAGS "--coverage -fprofile-arcs -ftest-coverage")
		SET(GCC_COVERAGE_LINK_FLAGS    "-lgcov")
		SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
		SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
		SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
	ENDIF()

	#
	IF(BUILD_WITH_PROFILER)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
	ENDIF()
ELSEIF ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )
  SET(CMAKE_CXX_FLAGS "-fvisibility=hidden -fno-strict-aliasing -Wall -Wno-long-long ${CMAKE_CXX_FLAGS}" )
  SET(CMAKE_C_FLAGS "-fno-strict-aliasing ${CMAKE_C_FLAGS}")
ELSEIF(MSVC)
	# Enable multi-core compilation with MSVC
	IF( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" ) # clang-cl
		ADD_COMPILE_OPTIONS(/bigobj /W4 /WX )
	ELSE() # msvc
		ADD_COMPILE_OPTIONS(/MP /bigobj /W4 /WX)
	ENDIF()

	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /Zi /Od")
ELSEIF ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )
	SET(CMAKE_CXX_FLAGS "-g -fvisibility=hidden -fno-strict-aliasing -Wall -Wno-long-long ${CMAKE_CXX_FLAGS}" )
	SET(CMAKE_C_FLAGS "-fno-strict-aliasing ${CMAKE_C_FLAGS}")
ELSEIF( CMAKE_COMPILER_IS_MINGW )
	SET(CMAKE_CXX_FLAGS "-fvisibility=hidden -fno-strict-aliasing -Wall -Wno-long-long -Wa,-mbig-obj ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_C_FLAGS "-fno-strict-aliasing ${CMAKE_C_FLAGS}")
	ADD_DEFINITIONS( -U__STRICT_ANSI__ )
ELSE()

ENDIF()

IF(UNIX)
  OPTION(WITH_COMPILER_CCACHE "Use ccache to improve rebuild times (Works with Ninja, Makefiles and Xcode)" OFF)
ENDIF()

FIND_PACKAGE(Lua REQUIRED)
IF(LUA_FOUND)
    MESSAGE(STATUS "LUA found: ${LUA_LIBRARIES}.")
ENDIF()

FILE (GLOB basecore 	${CMAKE_CURRENT_SOURCE_DIR}/src/*.c)

ADD_LIBRARY(lhpm SHARED ${basecore})
TARGET_LINK_LIBRARIES(lhpm  ${LUA_LIBRARIES} hpm)
TARGET_INCLUDE_DIRECTORIES (lhpm  PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
	$<BUILD_INTERFACE:${LUA_INCLUDE_DIR}>
	$<INSTALL_INTERFACE:include>
)
IF (BUILD_WITH_EXTERNAL_PROJECT)
	ADD_DEPENDENCIES(lhpm hpm-external)
	TARGET_INCLUDE_DIRECTORIES(lhpm PRIVATE ${HPM_INCLUDE_DIRS} )
ENDIF ()

SET_TARGET_PROPERTIES(lhpm PROPERTIES PREFIX "")

SET(Lua_VERSION "5.3")
INSTALL(
	TARGETS lhpm
	DESTINATION lib/lua/${Lua_VERSION}
)

#HPM_OPT_BUILD_PACKAGES
IF(CMAKE_CPACK_COMMAND AND UNIX)
	SET(CPACK_GENERATOR "DEB")
	SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "valdemar lindberg") #required
	# Packing information
	SET(CPACK_PACKAGE_NAME                    "hpm${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}")
	SET(CPACK_PACKAGE_CONTACT "" CACHE STRING "Package maintainer and PGP signer.")
	SET(CPACK_PACKAGE_VENDOR                  "https://github.com/voldien/hpm")
	SET(CPACK_PACKAGE_DISPLAY_NAME            "hpm ${HPM_VERSION_MAJOR}")
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY     " - Hpm 3D math library")
	SET(CPACK_PACKAGE_VERSION                 "${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}" )
	SET(CPACK_PACKAGE_VERSION_MAJOR           "${HPM_VERSION_MAJOR}")
	SET(CPACK_PACKAGE_VERSION_MINOR           "${HPM_VERSION_MINOR}")
	SET(CPACK_PACKAGE_VERSION_PATCH           "${HPM_VERSION_REVISION}")
	SET(CPACK_PACKAGE_INSTALL_DIRECTORY       "hpm${HPM_VERSION_MINOR}.${HPM_VERSION_MINOR}")
	SET(CPACK_RESOURCE_FILE_LICENSE           "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

	STRING(TOUPPER ${LIBHPM_COMPONENT}     "LIBHPM_COMPONENT_UPPER")
	STRING(TOUPPER ${LIBHPM-DEV_COMPONENT} "LIBHPM-DEV_COMPONENT_UPPER")

	SET(CPACK_COMPONENT_${LIBHPM_COMPONENT_UPPER}_DISPLAY_NAME     "libraries")
	SET(CPACK_COMPONENT_${LIBHPM-DEV_COMPONENT_UPPER}_DISPLAY_NAME "common headers and installs")
	SET(CPACK_COMPONENT_${LIBHPM-DEV_COMPONENT_UPPER}_DEPENDS $    "{LIBHPM_COMPONENT}" )
	SET(CPACK_COMPONENT_HPM-DEV_DISPLAY_NAME                       "${CPACK_COMPONENT_${LIBHPM-DEV_COMPONENT}_DISPLAY_NAME}" )
	SET(CPACK_COMPONENT_HPM-DEV_DEPENDS                            "${LIBHPM-DEV_COMPONENT}" )
	SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)

	# debian
	SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
	SET(CPACK_DEBIAN_CMAKE_OPTIONS    "-DBUILD_WITH_DOCS=OFF -DBUILD_TEST=OFF")
	SET(CPACK_DEBIAN_PACKAGE_SECTION  "libs" )
	SET(CPACK_DEBIAN_PACKAGE_DEPENDS  "${CPACK_COMPONENTS_ALL}")
	SET(CPACK_DEBIAN_PACKAGE_SUGGESTS)
	SET(cPACK_DEBIAN_PACKAGE_NAME     "hpm")
	SET(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES workspaces test docs obj packaging)
	SET(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force)
	SET(CPACK_DEBIAN_CHANGELOG)

	SET(DPUT_HOST "" CACHE STRING "PPA repository to upload the debian sources")

	INCLUDE(DebSourcePPA)
	INCLUDE(CPack)
ENDIF()

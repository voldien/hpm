cmake_minimum_required(VERSION 2.8)
project(hpm)


#	build shared/dynamic library option
option(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
if(NOT BUILD_SHARED_LIBS)
	set(CMAKE_EXE_LINKER_FLAGS "-static")
	set(LINK_SEARCH_START_STATIC TRUE)
endif()



#	Extract tag version from git.
execute_process(COMMAND git describe
		COMMAND sed -e "s/[^0-9]*//g"
		COMMAND cut -c1-1
		OUTPUT_VARIABLE _hpm_major OUTPUT_STRIP_TRAILING_WHITESPACE
		RESULT_VARIABLE _major_version_failed)

execute_process(COMMAND git describe
		COMMAND sed -e "s/[^0-9].[^0-9]*//g"
		COMMAND cut -c1-1
		OUTPUT_VARIABLE _hpm_minor OUTPUT_STRIP_TRAILING_WHITESPACE
		RESULT_VARIABLE _minor_version_failed)

execute_process(COMMAND git describe
		COMMAND sed -e "s/[^0-9].[^0-9].[^0-9]*//g"
		COMMAND cut -c1-2
		OUTPUT_VARIABLE _hpm_revision OUTPUT_STRIP_TRAILING_WHITESPACE
		RESULT_VARIABLE _revision_version_failed)

#	hpm version setup.
SET(HPM_VERSION_MAJOR ${_hpm_major})
SET(HPM_VERSION_MINOR ${_hpm_minor})
SET(HPM_VERSION_REVISION ${_hpm_revision})
SET(HPM_VERSION ${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}.${HPM_VERSION_REVISION} )


MESSAGE(STATUS "Version ${HPM_VERSION}")
#ADD_DEFINITIONS(-DHPM_MAJOR_VERSION=${HPM_VERSION_MAJOR})
#ADD_DEFINITIONS(-DHPM_MINOR_VERSION=${HPM_VERSION_MINOR})
#ADD_DEFINITIONS(-DHPM_REVISION_VERSION=${HPM_VERSION_REVISION})
if((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
	IF(BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8)
		ADD_DEFINITIONS(-fPIC)
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	ENDIF()

	ADD_DEFINITIONS(-std=c11)
	ADD_DEFINITIONS(-w)
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG)
		SET(CMAKE_RELEASE TRUE)
		SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s")
	ELSE()
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3)
		SET(CMAKE_DEBUG TRUE)
	ENDIF()
	SET(SIMD_FLAGS "-ftree-vectorize -ftree-slp-vectorize -ftree-vectorizer-verbose=10 -fopt-info-vec-optimized -O3 ") # -march=native

elseif(MSVC)
		# enable multi-core complication with MSVC
		ADD_DEFINITIONS(/MP)
endif()


#	File source paths
FILE (GLOB headers "include/*.h")
FILE (GLOB basecore src/vector_base.c src/matrix_base.c src/quat_base.c )
FILE (GLOB nosimdsource src/nosimd_* )
FILE (GLOB allsimdsource src/allsimd_* )
FILE (GLOB all_sse_source src/all_sse_*)
FILE (GLOB sse_source src/sse_*)
FILE (GLOB sse2_source src/sse2_*)
FILE (GLOB sse3_source src/sse3_*)
FILE (GLOB sse41_source src/sse41_*)
FILE (GLOB sse42_source src/sse42_*)
FILE (GLOB avx_source src/avx_*)
FILE (GLOB avx2_source src/avx2_*)
INCLUDE_DIRECTORIES(include)


#
ADD_LIBRARY(hpm src/hpm.c)
SET_TARGET_PROPERTIES(hpm PROPERTIES COMPILE_FLAGS "-DHPM_INTERNAL=1" )
TARGET_LINK_LIBRARIES(hpm -lm -ldl)

#	Target for cpu with no supported simd extensions.
ADD_LIBRARY(hpmnosimd ${basecore} ${nosimdsource})
SET_TARGET_PROPERTIES(hpmnosimd PROPERTIES COMPILE_FLAGS "-mno-abm -O2 -DHPM_INTERNAL_IMP=1" )
TARGET_LINK_LIBRARIES(hpmnosimd -lm)


IF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
#ADD_LIBRARY(${avx512_source} ${basecore} )
#SET_TARGET_PROPERTIES(hpmavx512 PROPERTIES COMPILE_FLAGS "-mavx512" )
#TARGET_LINK_LIBRARIES(hpmavx512 -lm)

#	Target for AVX2
ADD_LIBRARY(hpmavx2 ${avx2_source}  ${basecore} ${allsimdsource})
SET_TARGET_PROPERTIES(hpmavx2 PROPERTIES COMPILE_FLAGS "-mavx2 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmavx2 -lm)

#	Target for AVX
ADD_LIBRARY(hpmavx ${avx_source} ${basecore} ${allsimdsource})
SET_TARGET_PROPERTIES(hpmavx PROPERTIES COMPILE_FLAGS "-mavx -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmavx -lm)

#ADD_LIBRARY(hpmmmx src/mmx_matrix.c ${basecore} )
#SET_TARGET_PROPERTIES(hpmmmx PROPERTIES COMPILE_FLAGS "-mmmx -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
#TARGET_LINK_LIBRARIES(hpmmmx -lm)

ADD_LIBRARY(hpmsse src/sse_matrix.c src/sse_vector.c src/sse_quaternion.c  ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmsse PROPERTIES COMPILE_FLAGS "-msse -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmsse -lm)

ADD_LIBRARY(hpmsse2 src/sse_matrix.c  ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmsse2 PROPERTIES COMPILE_FLAGS "-msse2 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmsse2 -lm)

ADD_LIBRARY(hpmsse3 src/sse_matrix.c ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmsse3 PROPERTIES COMPILE_FLAGS "-msse3 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmsse3 -lm)

ADD_LIBRARY(hpmssse3 ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmssse3 PROPERTIES COMPILE_FLAGS "-mssse3 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ")
TARGET_LINK_LIBRARIES(hpmssse3 -lm)

ADD_LIBRARY(hpmsse41 src/sse_matrix.c ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmsse41 PROPERTIES COMPILE_FLAGS "-msse4.1 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} " )
TARGET_LINK_LIBRARIES(hpmsse41 -lm)

ADD_LIBRARY(hpmsse42 src/sse_matrix.c ${basecore} ${allsimdsource} ${all_sse_source})
SET_TARGET_PROPERTIES(hpmsse42 PROPERTIES COMPILE_FLAGS "-msse4.2 -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ")
TARGET_LINK_LIBRARIES(hpmsse42 -lm)

ELSE()
	ADD_LIBRARY(hpmneon ${basecore}) #	Will resolve the neon specific implementation later. 
	SET_TARGET_PROPERTIES(hpmneon PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1  -mfpu=neon" )	#-funsafe-math-optimizations 
ENDIF()



# Add the install targets
INSTALL (TARGETS hpm DESTINATION lib)
INSTALL (TARGETS hpmnosimd DESTINATION lib)
IF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
#INSTALL (TARGETS hpmavx512 DESTINATION lib)
INSTALL (TARGETS hpmavx2 DESTINATION lib)
INSTALL (TARGETS hpmavx DESTINATION lib)
#INSTALL (TARGETS hpmmmx DESTINATION lib)
INSTALL (TARGETS hpmsse DESTINATION lib)
INSTALL (TARGETS hpmsse2 DESTINATION lib)
INSTALL (TARGETS hpmsse3 DESTINATION lib)
#INSTALL (TARGETS hpmssse3 DESTINATION lib)
INSTALL (TARGETS hpmsse41 DESTINATION lib)
INSTALL (TARGETS hpmsse42 DESTINATION lib)
ENDIF()
IF(__arm__)
INSTALL (TARGETS hpmneon DESTINATION lib)
ENDIF()
INSTALL (FILES ${headers} DESTINATION include/hpm)


#	AND HPM_OPT_BUILD_PACKAGES
if(CMAKE_CPACK_COMMAND AND UNIX AND HPM_OPT_BUILD_PACKAGES)
	
	MESSAGE(STATUS "Generate CPack script.")
	IF(UNIX)
		SET(CPACK_GENERATOR "DEB")
		#SET(CPACK_GENERATOR "RPM")
	ELSEIF(WIN32)
		SET(CPACK_GENERATOR "")	
	ENDIF()

	SET(CPACK_CMAKE_GENERATOR "Unix Makefiles")
	SET(CPACK_PACKAGE_NAME	"hpm${HPM_MAJOR_VERSION}")
	SET(CPACK_PACKAGE_CONTACT "Valdemar Lindberg" CACHE STRING "Package maintainer and PGP signer.")
	SET(CPACK_PACKAGE_VENDOR "http://HPM.linuxsenpai.org/")
	SET(CPACK_PACKAGE_DISPLAY_NAME "hpm ${HPM_VERSION}")
	SET(CPACK_PACKAGE_DESCRIPTION "hpm.")
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HPM is")
	SET(CPACK_PACKAGE_VERSION "${HPM_VERSION}")
	SET(CPACK_PACKAGE_VERSION_MAJOR "${HPM_VERSION_MAJOR}")
	SET(CPACK_PACKAGE_VERSION_MINOR "${HPM_VERSION_MINOR}")
	SET(CPACK_PACKAGE_VERSION_PATCH "${HPM_VERSION_REVISION}")
	SET(CPACK_PACKAGE_INSTALL_DIRECTORY "hpm-${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}")
	SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
	SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "hpm${HPM_VERSION}" )


	#	windows installer.	
	SET(CPACK_NSIS_DISPLAY_NAME "hpm")

	#debian
	SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake pkg-config)
	SET(CPACK_DEBIAN_PACKAGE_PRIORITY extra)
	SET(CPACK_DEBIAN_PACKAGE_SECTION "libs")
	SET(CPACK_DEBIAN_CMAKE_OPTIONS "")
	SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.1)" ) #${CPACK_COMPONENTS_ALL}" libalsa  libelt
	SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE )
	SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "" )
	SET(CPACK_DEBIAN_PACKAGE_NAME "hpm")
	SET(CPACK_DEBIAN_PACKAGE_FILE_NAME "hpm-${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}${HPM_VERSION_REVISION}")
	SET(CPACK_DEBIAN_PACKAGE_SOURCE_FILES ${headers})
	SET(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES)

	SET(CPACK_PACKAGE_INSTALL_DIRECTORY "hpm0.5.0")
	SET(CPACK_DEBIAN_CHANGELOG)
	SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Valdemar Lindberg voldemor2009@hotmail.com") #required
	SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA )
	SET(CPACK_DEBIAN_PACKAGE_SECTION )
	SET(CPACK_DEBIAN_PACKAGE_VERSION "${HPM_VERSION}")


	#	
	EXECUTE_PROCESS(COMMAND lsb_release -is
	    OUTPUT_VARIABLE _lsb_distribution OUTPUT_STRIP_TRAILING_WHITESPACE
	    RESULT_VARIABLE _lsb_release_failed)
	SET(CPACK_DEBIAN_DISTRIBUTION_NAME ${_lsb_distribution} CACHE STRING "Name of the distrubiton")
	string(TOLOWER ${CPACK_DEBIAN_DISTRIBUTION_NAME} CPACK_DEBIAN_DISTRIBUTION_NAME)
	IF( ${CPACK_DEBIAN_DISTRIBUTION_NAME} STREQUAL "ubuntu" )
		SET(CPACK_DEBIAN_DISTRIBUTION_RELEASES lucid maverick natty oneiric precise CACHE STRING "Release code-names of the distrubiton release")
	ENDIF()

	SET(DPUT_HOST "" CACHE STRING "PPA repository to upload the debian source")

	SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)
	SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON)

	SET(CPACK_SOURCE_GENERATOR "TGZ")
	SET(CPACK_SYSTEM_NAME "Linux")
	SET(CPACK_TOPLEVEL_TAG "Linux")

	INCLUDE(CPack)
 	#INCLUDE(DebSourcePPA)

ENDIF()



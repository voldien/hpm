CMAKE_MINIMUM_REQUIRED(VERSION 3.11.0)
PROJECT(hpm VERSION 0.9.1 LANGUAGES C)

#	build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_TEST "Build Test Suite" ON)
IF(NOT BUILD_SHARED_LIBS)
	set(CMAKE_EXE_LINKER_FLAGS "-static")
	set(LINK_SEARCH_START_STATIC TRUE)
ENDIF()
OPTION(USE_SINGLE_LIBRARY "Build a single library binary file" OFF) # Not Full Supported.
OPTION(BUILD_WITH_INSTALL "Add Install Targets" ON)


# hpm version setup.
SET(HPM_VERSION_MAJOR 0)
SET(HPM_VERSION_MINOR 9)
SET(HPM_VERSION_REVISION 0)
SET(HPM_VERSION_STATE rc)
SET(HPM_VERSION ${HPM_VERSION_MAJOR}.${HPM_VERSION_MINOR}${HPM_VERSION_STATE}${HPM_VERSION_REVISION} )

# Set version preprocessor macros.
MESSAGE(STATUS "Version ${HPM_VERSION}")
ADD_DEFINITIONS(-DHPM_MAJOR_VERSION=${HPM_VERSION_MAJOR})
ADD_DEFINITIONS(-DHPM_MINOR_VERSION=${HPM_VERSION_MINOR})
ADD_DEFINITIONS(-DHPM_REVISION_VERSION=${HPM_VERSION_REVISION})
ADD_DEFINITIONS(-DHPM_STATE_VERSION=${HPM_VERSION_STATE})
ADD_DEFINITIONS(-DHPM_STR_VERSION="${HPM_VERSION}")

# Check if compile single library.
IF(USE_SINGLE_LIBRARY)
	MESSAGE(STATUS "Single Library Mode.")
	ADD_DEFINITIONS(-DHPM_USE_SINGLE_LIBRARY=1)

	# Static compile all.
	SET(BUILD_SHARED_LIBS FALSE)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(BUILD_SHARED_LIBRARIES OFF)
	SET(LINK_SEARCH_START_STATIC TRUE)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	SET(SIMD_FLAGS "${SIMD_FLAGS} -static")
ELSE()
	MESSAGE(STATUS "Individual SIMD Library Mode.")
ENDIF()



# GCC compiler options.
IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
	ADD_DEFINITIONS(-fPIC)
	# Compiling language standard.
	ADD_DEFINITIONS(-std=c11)
	ADD_DEFINITIONS(-Werror)
	# 
	ADD_DEFINITIONS(-w)

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
		SET(SIMD_FLAGS "-ftree-vectorize -ftree-slp-vectorize -ftree-vectorizer-verbose=10 -fopt-info-vec-optimized")
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
		SET(SIMD_FLAGS "-ftree-vectorize -ftree-slp-vectorize -ftree-vectorizer-verbose=10 -fopt-info-vec-optimized")
	ENDIF()

ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
	# Compiling language standard.
	ADD_DEFINITIONS(-fPIC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	ADD_DEFINITIONS(-std=c11)
	ADD_DEFINITIONS(-w)

	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(-DNDEBUG -O2)
		SET(CMAKE_RELEASE TRUE)
		SET(SIMD_FLAGS "-loop-vectorize")
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(-D_DEBUG)
		ADD_DEFINITIONS(-g3 -O0)
		SET(CMAKE_DEBUG TRUE)
		SET(SIMD_FLAGS "-loop-vectorize")
	ENDIF()

	#
	SET(SIMD_FLAGS "${SIMD_FLAGS}")
ELSEIF(MSVC)
	# Enable multi-core complication with MSVC
	ADD_DEFINITIONS(/MP)
	ADD_DEFINITIONS(/DHPM_INTERNAL=1)
	ADD_DEFINITIONS(/DHPM_INTERNAL_IMP=1)
	# Check build target.
	IF (CMAKE_BUILD_TYPE STREQUAL "Release")
		MESSAGE(STATUS "Compile for release.")
		ADD_DEFINITIONS(/DNDEBUG /O2)
		SET(CMAKE_RELEASE TRUE)
	ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Debug")
		MESSAGE(STATUS "Compile for debug.")
		ADD_DEFINITIONS(/D_DEBUG)
		ADD_DEFINITIONS(/Od)
		SET(CMAKE_DEBUG TRUE)
	ENDIF()
ELSE()
	MESSAGE(FATAL_ERROR "No supported compiler")
ENDIF()

# Source files.
FILE (GLOB headers 	${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)
FILE (GLOB basecore 	${CMAKE_CURRENT_SOURCE_DIR}/src/base/*
			${CMAKE_CURRENT_SOURCE_DIR}/src/utility.c)
FILE (GLOB nosimdsource ${CMAKE_CURRENT_SOURCE_DIR}/src/nosimd/* )
FILE (GLOB all_sse_source ${CMAKE_CURRENT_SOURCE_DIR}/src/sse/*)
FILE (GLOB avx_source ${CMAKE_CURRENT_SOURCE_DIR}/src/avx/*)
FILE (GLOB neon_source ${CMAKE_CURRENT_SOURCE_DIR}/src/neon/*)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
# X86 and amd64 CPU architecture.
IF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")

	# Set specific target compile flag options.
	IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
		SET(SIMD_FLAGS_NO  "-mno-abm -DHPM_SIMD_PREFIX=1" )
		SET(SIMD_FLAGS_SSE "-msse -DHPM_SSE_SIMD_PREFIX=1")
        SET(SIMD_FLAGS_SSE2 "-msse2 -DHPM_SSE2_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE3 "-msse3 -DHPM_SSE3_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE41 "-msse4.1 -DHPM_SSE41_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE42 "-msse4.2 -DHPM_SSE42_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX "-mavx -DHPM_AVX_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX2 "-mavx2 -DHPM_AVX2_SIMD_PREFIX=1")
	ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
		SET(SIMD_FLAGS_NO  " /DHPM_SIMD_PREFIX=1" )
		SET(SIMD_FLAGS_SSE "/arch:SSE /DHPM_SSE_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE2 "/arch:SSE2 /DHPM_SSE2_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE3 "/arch:SSE3 /DHPM_SSE3_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE41 "/arch:SSE4.1 /DHPM_SSE41_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE42 "/arch:SSE4.2 /DHPM_SSE42_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX "/arch:AVX /DHPM_AVX_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX2 "/arch:AVX2 /DHPM_AVX2_SIMD_PREFIX=1 ")
	ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
		SET(SIMD_FLAGS_NO  " -DHPM_SIMD_PREFIX=1 " )
		SET(SIMD_FLAGS_SSE "-msse -DHPM_SSE_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE2 "-msse2 -DHPM_SSE2_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE3 "-msse3 -DHPM_SSE3_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE41 "-msse4.1 -DHPM_SSE41_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_SSE42 "-msse4.2 -DHPM_SSE42_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX "-mavx -DHPM_AVX_SIMD_PREFIX=1")
		SET(SIMD_FLAGS_AVX2 "-mavx2 -DHPM_AVX2_SIMD_PREFIX=1")
	ELSE()
		MESSAGE(FATAL_ERROR "No supported Compiler")
	ENDIF()

	# Target for AVX2
	ADD_LIBRARY(hpmavx2 ${avx_source} ${basecore})
	SET_TARGET_PROPERTIES(hpmavx2 PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_AVX2}" )
	TARGET_LINK_LIBRARIES(hpmavx2 -lm)

	# Target for AVX
	ADD_LIBRARY(hpmavx ${avx_source} ${basecore})
	SET_TARGET_PROPERTIES(hpmavx PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_AVX} " )
	TARGET_LINK_LIBRARIES(hpmavx -lm)

	# Target for SSE
	ADD_LIBRARY(hpmsse ${basecore} ${all_sse_source})
	SET_TARGET_PROPERTIES(hpmsse PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_SSE} " )
	TARGET_LINK_LIBRARIES(hpmsse -lm)

	# Target for SSE2
	ADD_LIBRARY(hpmsse2 ${basecore} ${all_sse_source})
	SET_TARGET_PROPERTIES(hpmsse2 PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_SSE2}" )
	TARGET_LINK_LIBRARIES(hpmsse2 -lm)

	# Target for SSE3
	ADD_LIBRARY(hpmsse3 ${basecore} ${all_sse_source})
	SET_TARGET_PROPERTIES(hpmsse3 PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_SSE3} " )
	TARGET_LINK_LIBRARIES(hpmsse3 -lm)

	# Target for SSE4.1
	ADD_LIBRARY(hpmsse41 ${basecore} ${all_sse_source})
	SET_TARGET_PROPERTIES(hpmsse41 PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_SSE41}" )
	TARGET_LINK_LIBRARIES(hpmsse41 -lm)

	# Target for SSE4.2
	ADD_LIBRARY(hpmsse42 ${basecore} ${all_sse_source})
	SET_TARGET_PROPERTIES(hpmsse42 PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS} ${SIMD_FLAGS_SSE42}")
	TARGET_LINK_LIBRARIES(hpmsse42 -lm)

ELSEIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES "(arm)|(arm64)")
	# Target for NEON
	# SIMD extension support.
	ADD_DEFINITIONS(-DHPM_ARM_NEON=1)
	ADD_LIBRARY(hpmneon ${basecore} ${neon_source}) #	Will resolve the NEON specific implementation later.
	SET_TARGET_PROPERTIES(hpmneon PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL_IMP=1  -mfpu=neon" )	#-funsafe-math-optimizations 
ENDIF()

# Target with no SIMD extension requirements.
SET(NOSIMD_FLAGS "-DHPM_INTERNAL_IMP=1 ${SIMD_FLAGS_NO}")
ADD_LIBRARY(hpmnosimd ${basecore} ${nosimdsource})
SET_TARGET_PROPERTIES(hpmnosimd PROPERTIES COMPILE_FLAGS "${NOSIMD_FLAGS}" )
TARGET_LINK_LIBRARIES(hpmnosimd -lm)

# Main library target for initializing the library. The libhpm is always a shared library.
ADD_LIBRARY(hpm SHARED ${CMAKE_CURRENT_SOURCE_DIR}/src/hpm.c )
IF(USE_SINGLE_LIBRARY)
	
	# Instruction for building the single library.
	TARGET_LINK_LIBRARIES(hpm -lm -ldl )
	FILE(GLOB staticlib ${CMAKE_CURRENT_SOURCE_DIR}/*.a)
	STRING(REPLACE ".a/" ".a /" LIB_PATHS ${staticlib})

	#
	IF((CMAKE_COMPILER_IS_GNUCC) AND NOT CMAKE_COMPILER_IS_MINGOW)
		SET_TARGET_PROPERTIES(hpm PROPERTIES LINK_FLAGS "-Wl,--whole-archive ${LIB_PATHS} -Wl,--no-whole-archive")
	ENDIF()
	SET(BUILD_SHARED_LIBS TRUE)

	# 
	SET(LINK_SEARCH_START_STATIC FALSE)
	SET(CMAKE_EXE_LINKER_FLAGS "-shared")
ELSE()
	TARGET_LINK_LIBRARIES(hpm -lm -ldl)
ENDIF()
SET_TARGET_PROPERTIES(hpm PROPERTIES COMPILE_FLAGS " -DHPM_INTERNAL=1 -DHPM_ENTRY" )
TARGET_INCLUDE_DIRECTORIES (hpm PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
	$<INSTALL_INTERFACE:include>
)


IF(BUILD_WITH_INSTALL)
	# Non specific SIMD targets.
	INSTALL (FILES ${headers} DESTINATION include/hpm)

	# Add the install targets
	INSTALL (TARGETS hpm DESTINATION lib)
	IF(NOT USE_SINGLE_LIBRARY)

		# Install each individual SIMD library extensions.
		INSTALL (TARGETS hpmnosimd DESTINATION lib)
		IF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
			#INSTALL (TARGETS hpmavx512 DESTINATION lib)
			INSTALL (TARGETS hpmavx2 DESTINATION lib)
			INSTALL (TARGETS hpmavx DESTINATION lib)
			INSTALL (TARGETS hpmsse DESTINATION lib)
			INSTALL (TARGETS hpmsse2 DESTINATION lib)
			INSTALL (TARGETS hpmsse3 DESTINATION lib)
			INSTALL (TARGETS hpmsse41 DESTINATION lib)
			INSTALL (TARGETS hpmsse42 DESTINATION lib)
		ENDIF()
		
		# Install NEON SIMD extension if on an ARM platform.
		IF(__arm__)
			INSTALL (TARGETS hpmneon DESTINATION lib)
		ENDIF()
	ENDIF()
ENDIF()

# Invoke cmake file from the test directory.
IF(BUILD_TEST)
	ENABLE_TESTING()
	ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
ENDIF()

# Create distrubtion archive file.
IF( UNIX )
	SET( TARGETDIR "${PROJECT_NAME}-${HPM_VERSION}")
	ADD_CUSTOM_TARGET(	distribution
				COMMAND mkdir -p ${TARGETDIR}
				COMMAND mkdir -p ${TARGETDIR}/test
				COMMAND mkdir -p ${TARGETDIR}/test/glbunny
				COMMAND mkdir -p ${TARGETDIR}/test/hpmassert
				COMMAND cp -r ${CMAKE_CURRENT_SOURCE_DIR}/src
				${CMAKE_CURRENT_SOURCE_DIR}/include
				${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt
				${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
				${CMAKE_CURRENT_SOURCE_DIR}/README.md
				${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt
				${CMAKE_CURRENT_SOURCE_DIR}/test/hpmassert/inlcude
				${CMAKE_CURRENT_SOURCE_DIR}/test/hpmassert/src
				${CMAKE_CURRENT_SOURCE_DIR}/test/hpmassert/CMakeLists.txt
				${CMAKE_CURRENT_SOURCE_DIR}/test/glbunny/inlcude
				${CMAKE_CURRENT_SOURCE_DIR}/test/glbunny/src
				${CMAKE_CURRENT_SOURCE_DIR}/test/glbunny/CMakeLists.txt ${TARGETDIR}
				COMMAND tar cf - ${TARGETDIR} | gzip -c > ${TARGETDIR}.tar.gz
				COMMAND rm -r ${TARGETDIR} )
ENDIF()


